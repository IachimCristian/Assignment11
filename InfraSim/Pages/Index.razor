@page "/"
@using InfraSim.Pages
@using InfraSim.Models.Server
@using InfraSim.Models.Mediator
@inject IInfrastructureMediator InfrastructureMediator
@inject IServerFactory ServerFactory
@inject IServerDataMapper ServerDataMapper

<style>
    .container {
        display: flex;
        flex-direction: row;
        gap: 24px;
        padding: 20px;
    }

    .control-panel {
        width: 140px;
        display: flex;
        flex-direction: column;
    }

    .servers-panel {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        padding: 16px;
        flex: 1;
    }

    .cost-display {
        padding: 10px;
        margin-top: 10px;
        font-weight: 600;
        font-size: 1.1rem;
        text-align: center;
        border-radius: 8px;
        background-color: white;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
</style>

<div class="container">
    <div class="control-panel">
        <Actions StartPressed="@StartIncrementing" AddPressed="@AddServer" Refresh="RefreshUI" Reset="ResetServers" />
        <Users UserCount="@userCounter.Counter" />
        <div class="cost-display">€ @InfrastructureMediator.TotalCost.ToString("N0")</div>
    </div>
    <div class="servers-panel">
        @foreach (IServer server in Servers){
            <Server ServerInfo="@(new ServerInfoAdapter(server))" />
        }
    </div>
</div>

@code {
    private UserCounter userCounter = new UserCounter();
    private List<IServer> Servers = new List<IServer>();

    private void RefreshUI()
    {
        Servers = new List<IServer>();
        IServerIterator iterator = InfrastructureMediator.CreateServerIterator();
        while (iterator.HasNext)
            Servers.Add(iterator.Next);
        StateHasChanged();
    }

    private void AddServer(IServer server)
    {
        InfrastructureMediator.AddServer(server);
        RefreshUI();
    }
    
    private void ResetServers()
    {
        try
        {
            Console.WriteLine("=== ResetServers: Starting complete database reset ==="); // Starting the complete database 
            
            bool databaseResetSuccess = ServerDataMapper.RemoveAll();
            Console.WriteLine($"Database reset {(databaseResetSuccess ? "successful" : "FAILED")}");
            
            if (InfrastructureMediator.Gateway != null)
            {
                var gatewayServers = InfrastructureMediator.Gateway.Servers.ToList();
                
                foreach (var server in gatewayServers)
                {
                    if (server is ICluster && server == InfrastructureMediator.Processors)
                        continue; 
                    
                    Console.WriteLine($"Removing server {server.Id} from Gateway");
                    InfrastructureMediator.Gateway.RemoveServer(server);
                }
            }
            
            if (InfrastructureMediator.Processors != null)
            {
                var processorServers = InfrastructureMediator.Processors.Servers.ToList();
                
                foreach (var server in processorServers)
                {
                    Console.WriteLine($"Removing server {server.Id} from Processors");
                    InfrastructureMediator.Processors.RemoveServer(server);
                }
            }
            
            userCounter.Reset(); // Reset the user counter
            
            Console.WriteLine("Forcefully recreating infrastructure clusters");
            var resetMethod = typeof(InfrastructureMediator).GetMethod("CreateNewClusters", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (resetMethod != null)
            {
                Console.WriteLine("Found CreateNewClusters method, invoking it");
                resetMethod.Invoke(InfrastructureMediator, null);
                Console.WriteLine("Successfully recreated infrastructure clusters");
            }
            else
            {
                Console.WriteLine("WARNING: Could not find CreateNewClusters method, reset may be incomplete");
            }
            
            var servers = ServerDataMapper.GetAll();
            Console.WriteLine($"After reset: Database contains {servers?.Count ?? 0} servers");
            
            if (servers != null && servers.Any())
            {
                Console.WriteLine("Server types in database after reset:");
                foreach (var server in servers)
                {
                    Console.WriteLine($"  - {server.ServerType} with ID {server.Id}");
                }
            }
            
            Console.WriteLine("All servers have been reset from both memory and database");
            
            RefreshUI(); // Refresh the UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting servers: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    protected override void OnInitialized() // OnInitialized is called when the page is initialized 
    {
        userCounter.OnCounterChanged += StateHasChanged;
        RefreshUI();
    }

    private async Task StartIncrementing()
    {
        await userCounter.StartIncrementingAsync(); 
    }

    public void Dispose() 
    {
        userCounter.OnCounterChanged -= StateHasChanged; 
    }
}